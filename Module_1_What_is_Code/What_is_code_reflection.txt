What does a computer do when you type a letter? 
	When you press a particular button, a corresponding code gets generated and is sent to the processor. Then the code gets interpreted and a corresponding image of a typed symbol gets pulled from a font table and is displayed on a screen.

How do computers use input and output to create experiences? 
Computers use relatively primitive input devices like a keyboard, that's just capable of generating codes and pass them further to the RAM, CPU etc, and a mouse, that sends a change in a laser emitter (or a 
ball in the past) position to be processed into correlating positions of the mouse pointer on the screen.
Computers are literally everywhere, and experiences created by them vary greatly. A TV remote? A computer. TV itself? A computer. Elevator? A computer. Car? A computer. All of the things above include computers, just executing different tasks, having different means of input and creating totally different experiences. So we are a society highly dependent on computer to provide us with all kinds of experiences.

Why software products are essentially 'infinitely reproducible nothings'
The first reason why software products are 'infinitely reproducible nothings' is because software is not tangible. It is technically a 'nothing' in that respect. But thanks to being intangible, the financial margin of software is enormous. It doesn't require any raw materials, and virtually no input except intellectual. Besides, software is infinitely scalable, there is no limit as to how many copies of software you can reproduce, which even further increases its economic value. So it in essence is infinitely reproducible.

Explain in your own words how code becomes software.
Code essentially is a language that is an intermediary between a human and a machine, but much closer to humans. The goal of software is to get something done, run a task. It needs an instruction to do that. 

The language a computer understands is machine code. So in order for programming language code to become a machine code it needs to run through a compiler, which reads the program file line by line and translates it into machine code. But the code itself is not software yet. It’s more like a building block, that becomes software thanks to the intellect and skill of a software developer, who sort of ‘weaves’ code into  a final product able to fulfill a certain task or tasks, software. 

Explain 'algorithms' in your own words.
	Algorithm is a (hopefully) efficient way of solving a particular problem. You can think of it as a recipe to solve a problem. By the way you can think of a cooking recipe as an algorithm also. It is merely a sequence of steps that allows you to arrive to a certain result. Apparently you can solve a problem by using different approaches, but one should strive for the most efficient ones. The difference between an efficient and not-so-much algorithm can mean the increase in processing time that renders the application unusable. 

Explain the DRY principle.
The DRY principle means "Don't Repeat Yourself". It calls for a concise scalable solution where a task gets solved once and then gets infinitely reused by a computer in the future. It prevents wasting time on solving the same task more than once. Imagine you have a certain tasks that you need to use often. It would be wise to create a solution for it once, some kind of a function for example, and just include it in a reusable module that you can invoke an infinite amount of times in the future. That would be an example on DRY principle in real life.
In your own words, what is object-oriented programming
Object oriented programming is a programming paradigm alternative to functional programming. In functional programming we create functions at the highest level, and we invoke them as needed. This is fine, by can become confusing as a project grows, as there is no clearly visible relation between different functions. That’s where object-oriented shines. It is built around objects, that are just like real-life objects with their ‘properties’ and ‘actions’. For example, an object ‘dog’ can have a property of ‘color’ and an action of ‘bark’. It is much more intuitive and organized. In the modern world object-oriented programming is very important and very common.
In your own words explain data and how it relates to code
	In my opinion data is a term for information coming in different forms. It can be structured (like databases) or unstructured. The relation between coding and data is that coding is meant for data management, meaning it can help process the data, to use it to make something meaningful out of it. Ultimately the goal of programming is to manipulate data is some way, whether to serve it, sort it, change it or create it. Without data programming loses much of its value. 

What is a framework?
	A framework is an environment that includes a bundle of often-used functions and modules that significantly facilitate and speed up development. I would say that a framework is an implementation of a DRY principle. It bundles the most common tasks in modules, which helps reduce repetition and extra work. A framework is built on top of a programming language. There are a lot of frameworks for different purposes, like web development frameworks (Django for example), data science frameworks (Apache Spark), machine learning frameworks (TensorFlow) etc. 

What is debugging?
	Debugging is the process of finding 'bugs' in code, meaning things that prevent the code from running correctly, including but not limited to typos for example. In simple terms, debugging is making something that doesn't work, work. Debugging is essentially a process of tracing the code line by line to find out where an error is hidden. Most programming IDEs have built-in debuggers that greatly speed up and facilitate a debugging process.

Now with more understanding of what code is, why do you want to learn how to code? 
Since childhood, I’ve always had an inquisitive mind. I wanted to know everything, and I enjoyed logically deducing how things worked.  At some point in time, I have discovered a coding website, leetcode.com. I was immediately hooked. I remember solving a problem and thinking to myself, “this is definitely not the most elegant solution, I can certainly do better”. I’ve spent more time refining the solution until it shrank down to a few lines and I was proud of myself. I finally realized what I wanted to do in life. After doing some coding on my own I have enrolled in the Fullstack Academy of Code Bootcamp. During my time there I've learned a lot while working in a team environment. 
                What do I love about coding? The fact that if you can imagine something, you can build it. The idea that I have the power to create something interesting, useful, and awesome from scratch is absolutely amazing. And if I work in a team, that power grows exponentially. It is astonishing how much even a small team can achieve in a short span of time.
                Coding is a necessary skill in virtually every industry nowadays. Computers changed our world and I want to contribute to this revolution. This field is really versatile. There is something for everybody. There are so many different fields: web development, cloud computing, AI, machine learning. There is a lot of room for learning and growth.
Statistics has always fascinated me. I’m somewhat familiar with probabilities, regressions, etc. Being able to make sense out of terabytes of raw data and put it to use almost seems like magic. I would like to be able to be able to do it myself. In the future I see myself being employed as a data engineer. 
    I greatly enjoy learning new things, as well as explaining things that I know to others. I also like working in a team.
